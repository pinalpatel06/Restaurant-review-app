{"version":3,"sources":["js/main.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","document","addEventListener","event","fetchNeighborhoods","fetchCuisines","DBHelper","error","neighborhoods","console","self","fillNeighborhoodsHTML","arguments","undefined","select","getElementById","forEach","neighborhood","option","createElement","innerHTML","value","append","cuisines","fillCuisinesHTML","cuisine","window","initMap","map","google","maps","Map","zoom","center","lat","lng","scrollwheel","updateRestaurants","cSelect","nSelect","cIndex","selectedIndex","nIndex","fetchRestaurantByCuisineAndNeighborhood","restaurants","resetRestaurants","fillRestaurantsHTML","markers","m","setMap","ul","restaurant","createRestaurantHTML","addMarkersToMap","li","image","className","src","imageUrlForRestaurant","alt","name","address","more","href","urlForRestaurant","marker","mapMarkerForRestaurant","addListener","location","url","push"],"mappings":"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","file":"main.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar restaurants = void 0,\n    neighborhoods = void 0,\n    cuisines = void 0;\nvar map;\nvar markers = [];\n\n/**\r\n * Fetch neighborhoods and cuisines as soon as the page is loaded.\r\n */\ndocument.addEventListener('DOMContentLoaded', function (event) {\n  fetchNeighborhoods();\n  fetchCuisines();\n});\n\n/**\r\n * Fetch all neighborhoods and set their HTML.\r\n */\nfetchNeighborhoods = function fetchNeighborhoods() {\n  DBHelper.fetchNeighborhoods(function (error, neighborhoods) {\n    if (error) {\n      // Got an error\n      console.error(error);\n    } else {\n      self.neighborhoods = neighborhoods;\n      fillNeighborhoodsHTML();\n    }\n  });\n};\n\n/**\r\n * Set neighborhoods HTML.\r\n */\nfillNeighborhoodsHTML = function fillNeighborhoodsHTML() {\n  var neighborhoods = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.neighborhoods;\n\n  var select = document.getElementById('neighborhoods-select');\n  neighborhoods.forEach(function (neighborhood) {\n    var option = document.createElement('option');\n    option.innerHTML = neighborhood;\n    option.value = neighborhood;\n    select.append(option);\n  });\n};\n\n/**\r\n * Fetch all cuisines and set their HTML.\r\n */\nfetchCuisines = function fetchCuisines() {\n  DBHelper.fetchCuisines(function (error, cuisines) {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      self.cuisines = cuisines;\n      fillCuisinesHTML();\n    }\n  });\n};\n\n/**\r\n * Set cuisines HTML.\r\n */\nfillCuisinesHTML = function fillCuisinesHTML() {\n  var cuisines = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.cuisines;\n\n  var select = document.getElementById('cuisines-select');\n\n  cuisines.forEach(function (cuisine) {\n    var option = document.createElement('option');\n    option.innerHTML = cuisine;\n    option.value = cuisine;\n    select.append(option);\n  });\n};\n\n/**\r\n * Initialize Google map, called from HTML.\r\n */\nwindow.initMap = function () {\n  var loc = {\n    lat: 40.722216,\n    lng: -73.987501\n  };\n  self.map = new google.maps.Map(document.getElementById('map'), {\n    zoom: 12,\n    center: loc,\n    scrollwheel: false\n  });\n  updateRestaurants();\n};\n\n/**\r\n * Update page and map for current restaurants.\r\n */\nupdateRestaurants = function updateRestaurants() {\n  var cSelect = document.getElementById('cuisines-select');\n  var nSelect = document.getElementById('neighborhoods-select');\n\n  var cIndex = cSelect.selectedIndex;\n  var nIndex = nSelect.selectedIndex;\n\n  var cuisine = cSelect[cIndex].value;\n  var neighborhood = nSelect[nIndex].value;\n\n  DBHelper.fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, function (error, restaurants) {\n    if (error) {\n      // Got an error!\n      console.error(error);\n    } else {\n      resetRestaurants(restaurants);\n      fillRestaurantsHTML();\n    }\n  });\n};\n\n/**\r\n * Clear current restaurants, their HTML and remove their map markers.\r\n */\nresetRestaurants = function resetRestaurants(restaurants) {\n  // Remove all restaurants\n  self.restaurants = [];\n  var ul = document.getElementById('restaurants-list');\n  ul.innerHTML = '';\n\n  // Remove all map markers\n  self.markers.forEach(function (m) {\n    return m.setMap(null);\n  });\n  self.markers = [];\n  self.restaurants = restaurants;\n};\n\n/**\r\n * Create all restaurants HTML and add them to the webpage.\r\n */\nfillRestaurantsHTML = function fillRestaurantsHTML() {\n  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;\n\n  var ul = document.getElementById('restaurants-list');\n  restaurants.forEach(function (restaurant) {\n    ul.append(createRestaurantHTML(restaurant));\n  });\n  addMarkersToMap();\n};\n\n/**\r\n * Create restaurant HTML.\r\n */\ncreateRestaurantHTML = function createRestaurantHTML(restaurant) {\n  var li = document.createElement('li');\n\n  var image = document.createElement('img');\n  image.className = 'restaurant-img';\n  image.src = DBHelper.imageUrlForRestaurant(restaurant);\n  image.alt = 'Restautants thumbnail Image of ' + restaurant.name;\n  li.append(image);\n\n  var name = document.createElement('h4');\n  name.innerHTML = restaurant.name;\n  li.append(name);\n\n  var neighborhood = document.createElement('p');\n  neighborhood.innerHTML = restaurant.neighborhood;\n  li.append(neighborhood);\n\n  var address = document.createElement('p');\n  address.innerHTML = restaurant.address;\n  li.append(address);\n\n  var more = document.createElement('a');\n  more.innerHTML = 'View Details';\n  more.href = DBHelper.urlForRestaurant(restaurant);\n  //more.attributes.area-lable = `View detail of ${restaurant.name}`;\n  li.append(more);\n\n  return li;\n};\n\n/**\r\n * Add markers for current restaurants to the map.\r\n */\naddMarkersToMap = function addMarkersToMap() {\n  var restaurants = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : self.restaurants;\n\n  restaurants.forEach(function (restaurant) {\n    // Add marker to the map\n    var marker = DBHelper.mapMarkerForRestaurant(restaurant, self.map);\n    google.maps.event.addListener(marker, 'click', function () {\n      window.location.href = marker.url;\n    });\n    self.markers.push(marker);\n  });\n};\n\n},{}]},{},[1]);\n"]}