{"version":3,"sources":["js/dbhelper.js"],"names":["r","e","n","t","o","i","f","c","require","u","a","Error","code","p","exports","call","length","1","module","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","Object","defineProperty","key","Constructor","protoProps","staticProps","prototype","DBHelper","instance","TypeError","_classCallCheck","this","value","callback","xhr","XMLHttpRequest","open","DATABASE_URL","onload","status","restaurants","JSON","parse","responseText","error","send","id","fetchRestaurants","restaurant","find","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","photograph","google","maps","Marker","position","latlng","title","name","url","urlForRestaurant","animation","Animation","DROP","get"],"mappings":"CAAY,SAASA,EAAEC,EAAEC,EAAEC,GAAG,SAASC,EAAEC,EAAEC,GAAG,IAAIJ,EAAEG,GAAG,CAAC,IAAIJ,EAAEI,GAAG,CAAC,IAAIE,EAAE,mBAAmBC,SAASA,QAAQ,IAAIF,GAAGC,EAAE,OAAOA,EAAEF,GAAE,GAAI,GAAGI,EAAE,OAAOA,EAAEJ,GAAE,GAAI,IAAIK,EAAE,IAAIC,MAAM,uBAAuBN,EAAE,KAAK,MAAMK,EAAEE,KAAK,mBAAmBF,EAAE,IAAIG,EAAEX,EAAEG,GAAG,CAACS,QAAQ,IAAIb,EAAEI,GAAG,GAAGU,KAAKF,EAAEC,QAAQ,SAASd,GAAoB,OAAOI,EAAlBH,EAAEI,GAAG,GAAGL,IAAeA,IAAIa,EAAEA,EAAEC,QAAQd,EAAEC,EAAEC,EAAEC,GAAG,OAAOD,EAAEG,GAAGS,QAAQ,IAAI,IAAIL,EAAE,mBAAmBD,SAASA,QAAQH,EAAE,EAAEA,EAAEF,EAAEa,OAAOX,IAAID,EAAED,EAAEE,IAAI,OAAOD,EAA7b,CAA4c,CAACa,EAAE,CAAC,SAAST,EAAQU,EAAOJ,GACxe,aAEA,IAAIK,EAAe,WAAc,SAASC,EAAiBC,EAAQC,GAAS,IAAK,IAAIjB,EAAI,EAAGA,EAAIiB,EAAMN,OAAQX,IAAK,CAAE,IAAIkB,EAAaD,EAAMjB,GAAIkB,EAAWC,WAAaD,EAAWC,aAAc,EAAOD,EAAWE,cAAe,EAAU,UAAWF,IAAYA,EAAWG,UAAW,GAAMC,OAAOC,eAAeP,EAAQE,EAAWM,IAAKN,IAAiB,OAAO,SAAUO,EAAaC,EAAYC,GAAiJ,OAA9HD,GAAYX,EAAiBU,EAAYG,UAAWF,GAAiBC,GAAaZ,EAAiBU,EAAaE,GAAqBF,GAA7gB,IAOJ,WACb,SAASI,KANX,SAAyBC,EAAUL,GAAe,KAAMK,aAAoBL,GAAgB,MAAM,IAAIM,UAAU,qCAO5GC,CAAgBC,KAAMJ,GAGxBf,EAAae,EAAU,KAAM,CAAC,CAC5BL,IAAK,mBAMLU,MAAO,SAA0BC,GAC/B,IAAIC,EAAM,IAAIC,eACdD,EAAIE,KAAK,MAAOT,EAASU,cACzBH,EAAII,OAAS,WACX,GAAmB,MAAfJ,EAAIK,OAAgB,CAEtB,IACIC,EADOC,KAAKC,MAAMR,EAAIS,cACHH,YACvBP,EAAS,KAAMO,OACV,CAEL,IAAII,EAAQ,sCAAwCV,EAAIK,OACxDN,EAASW,EAAO,QAGpBV,EAAIW,SAOL,CACDvB,IAAK,sBACLU,MAAO,SAA6Bc,EAAIb,GAEtCN,EAASoB,iBAAiB,SAAUH,EAAOJ,GACzC,GAAII,EACFX,EAASW,EAAO,UACX,CACL,IAAII,EAAaR,EAAYS,KAAK,SAAUxD,GAC1C,OAAOA,EAAEqD,IAAMA,IAEbE,EAEFf,EAAS,KAAMe,GAGff,EAAS,4BAA6B,WAU7C,CACDX,IAAK,2BACLU,MAAO,SAAkCkB,EAASjB,GAEhDN,EAASoB,iBAAiB,SAAUH,EAAOJ,GACzC,GAAII,EACFX,EAASW,EAAO,UACX,CAEL,IAAIO,EAAUX,EAAYY,OAAO,SAAU3D,GACzC,OAAOA,EAAE4D,cAAgBH,IAE3BjB,EAAS,KAAMkB,QASpB,CACD7B,IAAK,gCACLU,MAAO,SAAuCsB,EAAcrB,GAE1DN,EAASoB,iBAAiB,SAAUH,EAAOJ,GACzC,GAAII,EACFX,EAASW,EAAO,UACX,CAEL,IAAIO,EAAUX,EAAYY,OAAO,SAAU3D,GACzC,OAAOA,EAAE6D,cAAgBA,IAE3BrB,EAAS,KAAMkB,QASpB,CACD7B,IAAK,0CACLU,MAAO,SAAiDkB,EAASI,EAAcrB,GAE7EN,EAASoB,iBAAiB,SAAUH,EAAOJ,GACzC,GAAII,EACFX,EAASW,EAAO,UACX,CACL,IAAIO,EAAUX,EACC,OAAXU,IAEFC,EAAUA,EAAQC,OAAO,SAAU3D,GACjC,OAAOA,EAAE4D,cAAgBH,KAGT,OAAhBI,IAEFH,EAAUA,EAAQC,OAAO,SAAU3D,GACjC,OAAOA,EAAE6D,cAAgBA,KAG7BrB,EAAS,KAAMkB,QASpB,CACD7B,IAAK,qBACLU,MAAO,SAA4BC,GAEjCN,EAASoB,iBAAiB,SAAUH,EAAOJ,GACzC,GAAII,EACFX,EAASW,EAAO,UACX,CAEL,IAAIW,EAAgBf,EAAYgB,IAAI,SAAUC,EAAG3D,GAC/C,OAAO0C,EAAY1C,GAAGwD,eAGpBI,EAAsBH,EAAcH,OAAO,SAAUK,EAAG3D,GAC1D,OAAOyD,EAAcI,QAAQF,IAAM3D,IAErCmC,EAAS,KAAMyB,QASpB,CACDpC,IAAK,gBACLU,MAAO,SAAuBC,GAE5BN,EAASoB,iBAAiB,SAAUH,EAAOJ,GACzC,GAAII,EACFX,EAASW,EAAO,UACX,CAEL,IAAIgB,EAAWpB,EAAYgB,IAAI,SAAUC,EAAG3D,GAC1C,OAAO0C,EAAY1C,GAAGuD,eAGpBQ,EAAiBD,EAASR,OAAO,SAAUK,EAAG3D,GAChD,OAAO8D,EAASD,QAAQF,IAAM3D,IAEhCmC,EAAS,KAAM4B,QASpB,CACDvC,IAAK,mBACLU,MAAO,SAA0BgB,GAC/B,MAAO,wBAA0BA,EAAWF,KAO7C,CACDxB,IAAK,wBACLU,MAAO,SAA+BgB,GACpC,MAAO,QAAUA,EAAWc,aAO7B,CACDxC,IAAK,yBACLU,MAAO,SAAgCgB,EAAYQ,GAOjD,OANa,IAAIO,OAAOC,KAAKC,OAAO,CAClCC,SAAUlB,EAAWmB,OACrBC,MAAOpB,EAAWqB,KAClBC,IAAK3C,EAAS4C,iBAAiBvB,GAC/BQ,IAAKA,EACLgB,UAAWT,OAAOC,KAAKS,UAAUC,SAGpC,CACDpD,IAAK,eAOLqD,IAAK,WAEH,MAAO,kDA/NE,IAsOb,KAAK,GAAG,CAAC","file":"dbhelper.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n'use strict';\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/**\r\n * Common database helper functions.\r\n */\nvar DBHelper = function () {\n  function DBHelper() {\n    _classCallCheck(this, DBHelper);\n  }\n\n  _createClass(DBHelper, null, [{\n    key: 'fetchRestaurants',\n\n\n    /**\r\n     * Fetch all restaurants.\r\n     */\n    value: function fetchRestaurants(callback) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', DBHelper.DATABASE_URL);\n      xhr.onload = function () {\n        if (xhr.status === 200) {\n          // Got a success response from server!\n          var json = JSON.parse(xhr.responseText);\n          var restaurants = json.restaurants;\n          callback(null, restaurants);\n        } else {\n          // Oops!. Got an error from server.\n          var error = 'Request failed. Returned status of ' + xhr.status;\n          callback(error, null);\n        }\n      };\n      xhr.send();\n    }\n\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantById',\n    value: function fetchRestaurantById(id, callback) {\n      // fetch all restaurants with proper error handling.\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          var restaurant = restaurants.find(function (r) {\n            return r.id == id;\n          });\n          if (restaurant) {\n            // Got the restaurant\n            callback(null, restaurant);\n          } else {\n            // Restaurant does not exist in the database\n            callback('Restaurant does not exist', null);\n          }\n        }\n      });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantByCuisine',\n    value: function fetchRestaurantByCuisine(cuisine, callback) {\n      // Fetch all restaurants  with proper error handling\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Filter restaurants to have only given cuisine type\n          var results = restaurants.filter(function (r) {\n            return r.cuisine_type == cuisine;\n          });\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantByNeighborhood',\n    value: function fetchRestaurantByNeighborhood(neighborhood, callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Filter restaurants to have only given neighborhood\n          var results = restaurants.filter(function (r) {\n            return r.neighborhood == neighborhood;\n          });\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchRestaurantByCuisineAndNeighborhood',\n    value: function fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          var results = restaurants;\n          if (cuisine != 'all') {\n            // filter by cuisine\n            results = results.filter(function (r) {\n              return r.cuisine_type == cuisine;\n            });\n          }\n          if (neighborhood != 'all') {\n            // filter by neighborhood\n            results = results.filter(function (r) {\n              return r.neighborhood == neighborhood;\n            });\n          }\n          callback(null, results);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchNeighborhoods',\n    value: function fetchNeighborhoods(callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Get all neighborhoods from all restaurants\n          var neighborhoods = restaurants.map(function (v, i) {\n            return restaurants[i].neighborhood;\n          });\n          // Remove duplicates from neighborhoods\n          var uniqueNeighborhoods = neighborhoods.filter(function (v, i) {\n            return neighborhoods.indexOf(v) == i;\n          });\n          callback(null, uniqueNeighborhoods);\n        }\n      });\n    }\n\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\n\n  }, {\n    key: 'fetchCuisines',\n    value: function fetchCuisines(callback) {\n      // Fetch all restaurants\n      DBHelper.fetchRestaurants(function (error, restaurants) {\n        if (error) {\n          callback(error, null);\n        } else {\n          // Get all cuisines from all restaurants\n          var cuisines = restaurants.map(function (v, i) {\n            return restaurants[i].cuisine_type;\n          });\n          // Remove duplicates from cuisines\n          var uniqueCuisines = cuisines.filter(function (v, i) {\n            return cuisines.indexOf(v) == i;\n          });\n          callback(null, uniqueCuisines);\n        }\n      });\n    }\n\n    /**\r\n     * Restaurant page URL.\r\n     */\n\n  }, {\n    key: 'urlForRestaurant',\n    value: function urlForRestaurant(restaurant) {\n      return './restaurant.html?id=' + restaurant.id;\n    }\n\n    /**\r\n     * Restaurant image URL.\r\n     */\n\n  }, {\n    key: 'imageUrlForRestaurant',\n    value: function imageUrlForRestaurant(restaurant) {\n      return '/img/' + restaurant.photograph;\n    }\n\n    /**\r\n     * Map marker for a restaurant.\r\n     */\n\n  }, {\n    key: 'mapMarkerForRestaurant',\n    value: function mapMarkerForRestaurant(restaurant, map) {\n      var marker = new google.maps.Marker({\n        position: restaurant.latlng,\n        title: restaurant.name,\n        url: DBHelper.urlForRestaurant(restaurant),\n        map: map,\n        animation: google.maps.Animation.DROP });\n      return marker;\n    }\n  }, {\n    key: 'DATABASE_URL',\n\n\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\n    get: function get() {\n      var port = 8000; // Change this to your server port\n      return 'http://localhost:' + port + '/data/restaurants.json';\n    }\n  }]);\n\n  return DBHelper;\n}();\n\n},{}]},{},[1]);\n"]}